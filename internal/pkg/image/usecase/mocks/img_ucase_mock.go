// Code generated by MockGen. DO NOT EDIT.
// Source: ./init.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	models "server/internal/pkg/models"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockImageUsecaseInterface is a mock of ImageUsecaseInterface interface.
type MockImageUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockImageUsecaseInterfaceMockRecorder
}

// MockImageUsecaseInterfaceMockRecorder is the mock recorder for MockImageUsecaseInterface.
type MockImageUsecaseInterfaceMockRecorder struct {
	mock *MockImageUsecaseInterface
}

// NewMockImageUsecaseInterface creates a new mock instance.
func NewMockImageUsecaseInterface(ctrl *gomock.Controller) *MockImageUsecaseInterface {
	mock := &MockImageUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockImageUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUsecaseInterface) EXPECT() *MockImageUsecaseInterfaceMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockImageUsecaseInterface) AddImage(userId int, image []byte) (models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", userId, image)
	ret0, _ := ret[0].(models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddImage indicates an expected call of AddImage.
func (mr *MockImageUsecaseInterfaceMockRecorder) AddImage(userId, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockImageUsecaseInterface)(nil).AddImage), userId, image)
}

// DeleteImage mocks base method.
func (m *MockImageUsecaseInterface) DeleteImage(userId int, imageUuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", userId, imageUuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImageUsecaseInterfaceMockRecorder) DeleteImage(userId, imageUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImageUsecaseInterface)(nil).DeleteImage), userId, imageUuid)
}

// GetIdFromContext mocks base method.
func (m *MockImageUsecaseInterface) GetIdFromContext(ctx context.Context) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdFromContext", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIdFromContext indicates an expected call of GetIdFromContext.
func (mr *MockImageUsecaseInterfaceMockRecorder) GetIdFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdFromContext", reflect.TypeOf((*MockImageUsecaseInterface)(nil).GetIdFromContext), ctx)
}

// GetParamFromContext mocks base method.
func (m *MockImageUsecaseInterface) GetParamFromContext(ctx context.Context, param string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParamFromContext", ctx, param)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetParamFromContext indicates an expected call of GetParamFromContext.
func (mr *MockImageUsecaseInterfaceMockRecorder) GetParamFromContext(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParamFromContext", reflect.TypeOf((*MockImageUsecaseInterface)(nil).GetParamFromContext), ctx, param)
}

// GetUUID mocks base method.
func (m *MockImageUsecaseInterface) GetUUID(ctx context.Context) (uuid.UUID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID", ctx)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockImageUsecaseInterfaceMockRecorder) GetUUID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockImageUsecaseInterface)(nil).GetUUID), ctx)
}

// GetUUIDFromContext mocks base method.
func (m *MockImageUsecaseInterface) GetUUIDFromContext(ctx context.Context) (uuid.UUID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUIDFromContext", ctx)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUUIDFromContext indicates an expected call of GetUUIDFromContext.
func (mr *MockImageUsecaseInterfaceMockRecorder) GetUUIDFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUIDFromContext", reflect.TypeOf((*MockImageUsecaseInterface)(nil).GetUUIDFromContext), ctx)
}

// LogError mocks base method.
func (m *MockImageUsecaseInterface) LogError(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", data)
}

// LogError indicates an expected call of LogError.
func (mr *MockImageUsecaseInterfaceMockRecorder) LogError(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockImageUsecaseInterface)(nil).LogError), data)
}

// LogInfo mocks base method.
func (m *MockImageUsecaseInterface) LogInfo(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", data)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockImageUsecaseInterfaceMockRecorder) LogInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockImageUsecaseInterface)(nil).LogInfo), data)
}
