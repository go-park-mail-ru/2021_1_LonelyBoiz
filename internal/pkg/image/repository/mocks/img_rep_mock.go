// Code generated by MockGen. DO NOT EDIT.
// Source: ./init.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "server/internal/pkg/models"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDbRepositoryInterface is a mock of DbRepositoryInterface interface.
type MockDbRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDbRepositoryInterfaceMockRecorder
}

// MockDbRepositoryInterfaceMockRecorder is the mock recorder for MockDbRepositoryInterface.
type MockDbRepositoryInterfaceMockRecorder struct {
	mock *MockDbRepositoryInterface
}

// NewMockDbRepositoryInterface creates a new mock instance.
func NewMockDbRepositoryInterface(ctrl *gomock.Controller) *MockDbRepositoryInterface {
	mock := &MockDbRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockDbRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbRepositoryInterface) EXPECT() *MockDbRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockDbRepositoryInterface) AddImage(userId int, uuid uuid.UUID) (models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", userId, uuid)
	ret0, _ := ret[0].(models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddImage indicates an expected call of AddImage.
func (mr *MockDbRepositoryInterfaceMockRecorder) AddImage(userId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockDbRepositoryInterface)(nil).AddImage), userId, uuid)
}

// GetImages mocks base method.
func (m *MockDbRepositoryInterface) GetImages(userId int) ([]models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", userId)
	ret0, _ := ret[0].([]models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockDbRepositoryInterfaceMockRecorder) GetImages(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockDbRepositoryInterface)(nil).GetImages), userId)
}

// RemoveImage mocks base method.
func (m *MockDbRepositoryInterface) RemoveImage(uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockDbRepositoryInterfaceMockRecorder) RemoveImage(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockDbRepositoryInterface)(nil).RemoveImage), uuid)
}

// MockStorageRepositoryInterface is a mock of StorageRepositoryInterface interface.
type MockStorageRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepositoryInterfaceMockRecorder
}

// MockStorageRepositoryInterfaceMockRecorder is the mock recorder for MockStorageRepositoryInterface.
type MockStorageRepositoryInterfaceMockRecorder struct {
	mock *MockStorageRepositoryInterface
}

// NewMockStorageRepositoryInterface creates a new mock instance.
func NewMockStorageRepositoryInterface(ctrl *gomock.Controller) *MockStorageRepositoryInterface {
	mock := &MockStorageRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockStorageRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepositoryInterface) EXPECT() *MockStorageRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddImage mocks base method.
func (m *MockStorageRepositoryInterface) AddImage(uuid uuid.UUID, image []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", uuid, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage.
func (mr *MockStorageRepositoryInterfaceMockRecorder) AddImage(uuid, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockStorageRepositoryInterface)(nil).AddImage), uuid, image)
}

// DeleteImage mocks base method.
func (m *MockStorageRepositoryInterface) DeleteImage(uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockStorageRepositoryInterfaceMockRecorder) DeleteImage(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockStorageRepositoryInterface)(nil).DeleteImage), uuid)
}
