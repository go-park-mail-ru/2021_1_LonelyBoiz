// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/messageUseCase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	io "io"
	reflect "reflect"
	models "server/internal/pkg/models"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageUsecaseInterface is a mock of MessageUsecaseInterface interface.
type MockMessageUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUsecaseInterfaceMockRecorder
}

// MockMessageUsecaseInterfaceMockRecorder is the mock recorder for MockMessageUsecaseInterface.
type MockMessageUsecaseInterfaceMockRecorder struct {
	mock *MockMessageUsecaseInterface
}

// NewMockMessageUsecaseInterface creates a new mock instance.
func NewMockMessageUsecaseInterface(ctrl *gomock.Controller) *MockMessageUsecaseInterface {
	mock := &MockMessageUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockMessageUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUsecaseInterface) EXPECT() *MockMessageUsecaseInterfaceMockRecorder {
	return m.recorder
}

// ChangeMessage mocks base method.
func (m *MockMessageUsecaseInterface) ChangeMessage(userId, messageId int, newMessage models.Message) (models.Message, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMessage", userId, messageId, newMessage)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeMessage indicates an expected call of ChangeMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) ChangeMessage(userId, messageId, newMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).ChangeMessage), userId, messageId, newMessage)
}

// CreateMessage mocks base method.
func (m *MockMessageUsecaseInterface) CreateMessage(newMessage models.Message, chatId, id int) (models.Message, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", newMessage, chatId, id)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) CreateMessage(newMessage, chatId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).CreateMessage), newMessage, chatId, id)
}

// LogError mocks base method.
func (m *MockMessageUsecaseInterface) LogError(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", data)
}

// LogError indicates an expected call of LogError.
func (mr *MockMessageUsecaseInterfaceMockRecorder) LogError(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).LogError), data)
}

// LogInfo mocks base method.
func (m *MockMessageUsecaseInterface) LogInfo(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", data)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockMessageUsecaseInterfaceMockRecorder) LogInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).LogInfo), data)
}

// ManageMessage mocks base method.
func (m *MockMessageUsecaseInterface) ManageMessage(userId, chatId, limitInt, offsetInt int) ([]models.Message, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageMessage", userId, chatId, limitInt, offsetInt)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ManageMessage indicates an expected call of ManageMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) ManageMessage(userId, chatId, limitInt, offsetInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).ManageMessage), userId, chatId, limitInt, offsetInt)
}

// ParseJsonToMessage mocks base method.
func (m *MockMessageUsecaseInterface) ParseJsonToMessage(body io.ReadCloser) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJsonToMessage", body)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJsonToMessage indicates an expected call of ParseJsonToMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) ParseJsonToMessage(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJsonToMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).ParseJsonToMessage), body)
}

// WebsocketMessage mocks base method.
func (m *MockMessageUsecaseInterface) WebsocketMessage(message models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WebsocketMessage", message)
}

// WebsocketMessage indicates an expected call of WebsocketMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) WebsocketMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebsocketMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).WebsocketMessage), message)
}
