// Code generated by MockGen. DO NOT EDIT.
// Source: ./messageUseCase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	io "io"
	reflect "reflect"
	models "server/internal/pkg/models"
	user_proto "server/internal/user_server/delivery/proto"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageUsecaseInterface is a mock of MessageUsecaseInterface interface.
type MockMessageUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUsecaseInterfaceMockRecorder
}

// MockMessageUsecaseInterfaceMockRecorder is the mock recorder for MockMessageUsecaseInterface.
type MockMessageUsecaseInterfaceMockRecorder struct {
	mock *MockMessageUsecaseInterface
}

// NewMockMessageUsecaseInterface creates a new mock instance.
func NewMockMessageUsecaseInterface(ctrl *gomock.Controller) *MockMessageUsecaseInterface {
	mock := &MockMessageUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockMessageUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUsecaseInterface) EXPECT() *MockMessageUsecaseInterfaceMockRecorder {
	return m.recorder
}

// AddEmailLetterToQueue mocks base method.
func (m *MockMessageUsecaseInterface) AddEmailLetterToQueue(email, body string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEmailLetterToQueue", email, body)
}

// AddEmailLetterToQueue indicates an expected call of AddEmailLetterToQueue.
func (mr *MockMessageUsecaseInterfaceMockRecorder) AddEmailLetterToQueue(email, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmailLetterToQueue", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).AddEmailLetterToQueue), email, body)
}

// ChangeMessage mocks base method.
func (m *MockMessageUsecaseInterface) ChangeMessage(userId, messageId int, newMessage models.Message) (models.Message, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMessage", userId, messageId, newMessage)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeMessage indicates an expected call of ChangeMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) ChangeMessage(userId, messageId, newMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).ChangeMessage), userId, messageId, newMessage)
}

// CreateMessage mocks base method.
func (m *MockMessageUsecaseInterface) CreateMessage(newMessage models.Message, chatId, id int) (models.Message, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", newMessage, chatId, id)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) CreateMessage(newMessage, chatId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).CreateMessage), newMessage, chatId, id)
}

// EmailHandler mocks base method.
func (m *MockMessageUsecaseInterface) EmailHandler() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmailHandler")
}

// EmailHandler indicates an expected call of EmailHandler.
func (mr *MockMessageUsecaseInterfaceMockRecorder) EmailHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmailHandler", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).EmailHandler))
}

// GetIdFromContext mocks base method.
func (m *MockMessageUsecaseInterface) GetIdFromContext(ctx context.Context) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdFromContext", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIdFromContext indicates an expected call of GetIdFromContext.
func (mr *MockMessageUsecaseInterfaceMockRecorder) GetIdFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdFromContext", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).GetIdFromContext), ctx)
}

// LogError mocks base method.
func (m *MockMessageUsecaseInterface) LogError(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", data)
}

// LogError indicates an expected call of LogError.
func (mr *MockMessageUsecaseInterfaceMockRecorder) LogError(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).LogError), data)
}

// LogInfo mocks base method.
func (m *MockMessageUsecaseInterface) LogInfo(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", data)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockMessageUsecaseInterfaceMockRecorder) LogInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).LogInfo), data)
}

// ManageMessage mocks base method.
func (m *MockMessageUsecaseInterface) ManageMessage(userId, chatId, limitInt, offsetInt int) ([]models.Message, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageMessage", userId, chatId, limitInt, offsetInt)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ManageMessage indicates an expected call of ManageMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) ManageMessage(userId, chatId, limitInt, offsetInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).ManageMessage), userId, chatId, limitInt, offsetInt)
}

// Message2ProtoMessage mocks base method.
func (m *MockMessageUsecaseInterface) Message2ProtoMessage(message models.Message) *user_proto.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message2ProtoMessage", message)
	ret0, _ := ret[0].(*user_proto.Message)
	return ret0
}

// Message2ProtoMessage indicates an expected call of Message2ProtoMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) Message2ProtoMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message2ProtoMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).Message2ProtoMessage), message)
}

// ParseJsonToMessage mocks base method.
func (m *MockMessageUsecaseInterface) ParseJsonToMessage(body io.ReadCloser) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJsonToMessage", body)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJsonToMessage indicates an expected call of ParseJsonToMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) ParseJsonToMessage(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJsonToMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).ParseJsonToMessage), body)
}

// ProtoMessage2Message mocks base method.
func (m *MockMessageUsecaseInterface) ProtoMessage2Message(message *user_proto.Message) models.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoMessage2Message", message)
	ret0, _ := ret[0].(models.Message)
	return ret0
}

// ProtoMessage2Message indicates an expected call of ProtoMessage2Message.
func (mr *MockMessageUsecaseInterfaceMockRecorder) ProtoMessage2Message(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMessage2Message", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).ProtoMessage2Message), message)
}

// SendEmailNotification mocks base method.
func (m *MockMessageUsecaseInterface) SendEmailNotification(chatId, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEmailNotification", chatId, id)
}

// SendEmailNotification indicates an expected call of SendEmailNotification.
func (mr *MockMessageUsecaseInterfaceMockRecorder) SendEmailNotification(chatId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailNotification", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).SendEmailNotification), chatId, id)
}

// WebsocketMessage mocks base method.
func (m *MockMessageUsecaseInterface) WebsocketMessage(message models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WebsocketMessage", message)
}

// WebsocketMessage indicates an expected call of WebsocketMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) WebsocketMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebsocketMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).WebsocketMessage), message)
}

// WebsocketReactMessage mocks base method.
func (m *MockMessageUsecaseInterface) WebsocketReactMessage(message models.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WebsocketReactMessage", message)
}

// WebsocketReactMessage indicates an expected call of WebsocketReactMessage.
func (mr *MockMessageUsecaseInterfaceMockRecorder) WebsocketReactMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebsocketReactMessage", reflect.TypeOf((*MockMessageUsecaseInterface)(nil).WebsocketReactMessage), message)
}
