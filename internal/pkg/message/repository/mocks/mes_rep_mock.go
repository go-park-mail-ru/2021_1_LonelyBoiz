// Code generated by MockGen. DO NOT EDIT.
// Source: ./message.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "server/internal/pkg/models"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageRepositoryInterface is a mock of MessageRepositoryInterface interface.
type MockMessageRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryInterfaceMockRecorder
}

// MockMessageRepositoryInterfaceMockRecorder is the mock recorder for MockMessageRepositoryInterface.
type MockMessageRepositoryInterfaceMockRecorder struct {
	mock *MockMessageRepositoryInterface
}

// NewMockMessageRepositoryInterface creates a new mock instance.
func NewMockMessageRepositoryInterface(ctrl *gomock.Controller) *MockMessageRepositoryInterface {
	mock := &MockMessageRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepositoryInterface) EXPECT() *MockMessageRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockMessageRepositoryInterface) AddMessage(authorId, chatId int, text string) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", authorId, chatId, text)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockMessageRepositoryInterfaceMockRecorder) AddMessage(authorId, chatId, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).AddMessage), authorId, chatId, text)
}

// ChangeMessageReaction mocks base method.
func (m *MockMessageRepositoryInterface) ChangeMessageReaction(messageId, reaction int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMessageReaction", messageId, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeMessageReaction indicates an expected call of ChangeMessageReaction.
func (mr *MockMessageRepositoryInterfaceMockRecorder) ChangeMessageReaction(messageId, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMessageReaction", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).ChangeMessageReaction), messageId, reaction)
}

// ChangeMessageText mocks base method.
func (m *MockMessageRepositoryInterface) ChangeMessageText(messageId int, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMessageText", messageId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeMessageText indicates an expected call of ChangeMessageText.
func (mr *MockMessageRepositoryInterfaceMockRecorder) ChangeMessageText(messageId, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMessageText", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).ChangeMessageText), messageId, text)
}

// CheckChat mocks base method.
func (m *MockMessageRepositoryInterface) CheckChat(userId, chatId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChat", userId, chatId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChat indicates an expected call of CheckChat.
func (mr *MockMessageRepositoryInterfaceMockRecorder) CheckChat(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChat", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).CheckChat), userId, chatId)
}

// CheckMessageForReacting mocks base method.
func (m *MockMessageRepositoryInterface) CheckMessageForReacting(userId, messageId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMessageForReacting", userId, messageId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMessageForReacting indicates an expected call of CheckMessageForReacting.
func (mr *MockMessageRepositoryInterfaceMockRecorder) CheckMessageForReacting(userId, messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMessageForReacting", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).CheckMessageForReacting), userId, messageId)
}

// DeleteMessage mocks base method.
func (m *MockMessageRepositoryInterface) DeleteMessage(messageId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", messageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageRepositoryInterfaceMockRecorder) DeleteMessage(messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).DeleteMessage), messageId)
}

// GetEmailById mocks base method.
func (m *MockMessageRepositoryInterface) GetEmailById(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailById", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailById indicates an expected call of GetEmailById.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetEmailById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailById", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetEmailById), id)
}

// GetMessage mocks base method.
func (m *MockMessageRepositoryInterface) GetMessage(messageId int) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", messageId)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetMessage(messageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetMessage), messageId)
}

// GetMessages mocks base method.
func (m *MockMessageRepositoryInterface) GetMessages(chatId, limit, offset int) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", chatId, limit, offset)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetMessages(chatId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetMessages), chatId, limit, offset)
}

// GetNameById mocks base method.
func (m *MockMessageRepositoryInterface) GetNameById(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameById", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNameById indicates an expected call of GetNameById.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetNameById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameById", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetNameById), id)
}

// GetPartnerId mocks base method.
func (m *MockMessageRepositoryInterface) GetPartnerId(chatId, userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartnerId", chatId, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartnerId indicates an expected call of GetPartnerId.
func (mr *MockMessageRepositoryInterfaceMockRecorder) GetPartnerId(chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartnerId", reflect.TypeOf((*MockMessageRepositoryInterface)(nil).GetPartnerId), chatId, userId)
}
