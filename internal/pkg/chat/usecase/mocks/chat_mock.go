// Code generated by MockGen. DO NOT EDIT.
// Source: ./chat.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	models "server/internal/pkg/models"
	user_proto "server/internal/user_server/delivery/proto"

	gomock "github.com/golang/mock/gomock"
	pq "github.com/lib/pq"
	context "golang.org/x/net/context"
)

// MockChatUsecaseInterface is a mock of ChatUsecaseInterface interface.
type MockChatUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatUsecaseInterfaceMockRecorder
}

// MockChatUsecaseInterfaceMockRecorder is the mock recorder for MockChatUsecaseInterface.
type MockChatUsecaseInterfaceMockRecorder struct {
	mock *MockChatUsecaseInterface
}

// NewMockChatUsecaseInterface creates a new mock instance.
func NewMockChatUsecaseInterface(ctrl *gomock.Controller) *MockChatUsecaseInterface {
	mock := &MockChatUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockChatUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatUsecaseInterface) EXPECT() *MockChatUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Chat2ProtoChat mocks base method.
func (m *MockChatUsecaseInterface) Chat2ProtoChat(chat models.Chat) *user_proto.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat2ProtoChat", chat)
	ret0, _ := ret[0].(*user_proto.Chat)
	return ret0
}

// Chat2ProtoChat indicates an expected call of Chat2ProtoChat.
func (mr *MockChatUsecaseInterfaceMockRecorder) Chat2ProtoChat(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat2ProtoChat", reflect.TypeOf((*MockChatUsecaseInterface)(nil).Chat2ProtoChat), chat)
}

// GetChat mocks base method.
func (m *MockChatUsecaseInterface) GetChat(userId, limitInt, offsetInt int) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", userId, limitInt, offsetInt)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatUsecaseInterfaceMockRecorder) GetChat(userId, limitInt, offsetInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatUsecaseInterface)(nil).GetChat), userId, limitInt, offsetInt)
}

// GetIdFromContext mocks base method.
func (m *MockChatUsecaseInterface) GetIdFromContext(ctx context.Context) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdFromContext", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIdFromContext indicates an expected call of GetIdFromContext.
func (mr *MockChatUsecaseInterfaceMockRecorder) GetIdFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdFromContext", reflect.TypeOf((*MockChatUsecaseInterface)(nil).GetIdFromContext), ctx)
}

// LogError mocks base method.
func (m *MockChatUsecaseInterface) LogError(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", data)
}

// LogError indicates an expected call of LogError.
func (mr *MockChatUsecaseInterfaceMockRecorder) LogError(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockChatUsecaseInterface)(nil).LogError), data)
}

// LogInfo mocks base method.
func (m *MockChatUsecaseInterface) LogInfo(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", data)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockChatUsecaseInterfaceMockRecorder) LogInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockChatUsecaseInterface)(nil).LogInfo), data)
}

// Photos2ProtoPhotos mocks base method.
func (m *MockChatUsecaseInterface) Photos2ProtoPhotos(userPhotos pq.StringArray) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Photos2ProtoPhotos", userPhotos)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Photos2ProtoPhotos indicates an expected call of Photos2ProtoPhotos.
func (mr *MockChatUsecaseInterfaceMockRecorder) Photos2ProtoPhotos(userPhotos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Photos2ProtoPhotos", reflect.TypeOf((*MockChatUsecaseInterface)(nil).Photos2ProtoPhotos), userPhotos)
}

// ProtoChat2Chat mocks base method.
func (m *MockChatUsecaseInterface) ProtoChat2Chat(chat *user_proto.Chat) models.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoChat2Chat", chat)
	ret0, _ := ret[0].(models.Chat)
	return ret0
}

// ProtoChat2Chat indicates an expected call of ProtoChat2Chat.
func (mr *MockChatUsecaseInterfaceMockRecorder) ProtoChat2Chat(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoChat2Chat", reflect.TypeOf((*MockChatUsecaseInterface)(nil).ProtoChat2Chat), chat)
}

// ProtoPhotos2Photos mocks base method.
func (m *MockChatUsecaseInterface) ProtoPhotos2Photos(userPhotos []string) pq.StringArray {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoPhotos2Photos", userPhotos)
	ret0, _ := ret[0].(pq.StringArray)
	return ret0
}

// ProtoPhotos2Photos indicates an expected call of ProtoPhotos2Photos.
func (mr *MockChatUsecaseInterfaceMockRecorder) ProtoPhotos2Photos(userPhotos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoPhotos2Photos", reflect.TypeOf((*MockChatUsecaseInterface)(nil).ProtoPhotos2Photos), userPhotos)
}
