// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/chat.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	models "server/internal/pkg/models"

	gomock "github.com/golang/mock/gomock"
)

// MockChatUsecaseInterface is a mock of ChatUsecaseInterface interface.
type MockChatUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatUsecaseInterfaceMockRecorder
}

// MockChatUsecaseInterfaceMockRecorder is the mock recorder for MockChatUsecaseInterface.
type MockChatUsecaseInterfaceMockRecorder struct {
	mock *MockChatUsecaseInterface
}

// NewMockChatUsecaseInterface creates a new mock instance.
func NewMockChatUsecaseInterface(ctrl *gomock.Controller) *MockChatUsecaseInterface {
	mock := &MockChatUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockChatUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatUsecaseInterface) EXPECT() *MockChatUsecaseInterfaceMockRecorder {
	return m.recorder
}

// GetChat mocks base method.
func (m *MockChatUsecaseInterface) GetChat(userId, limitInt, offsetInt int) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", userId, limitInt, offsetInt)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatUsecaseInterfaceMockRecorder) GetChat(userId, limitInt, offsetInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChatUsecaseInterface)(nil).GetChat), userId, limitInt, offsetInt)
}

// LogError mocks base method.
func (m *MockChatUsecaseInterface) LogError(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", data)
}

// LogError indicates an expected call of LogError.
func (mr *MockChatUsecaseInterfaceMockRecorder) LogError(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockChatUsecaseInterface)(nil).LogError), data)
}

// LogInfo mocks base method.
func (m *MockChatUsecaseInterface) LogInfo(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", data)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockChatUsecaseInterfaceMockRecorder) LogInfo(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockChatUsecaseInterface)(nil).LogInfo), data)
}

// ChatsWriter mocks base method.
func (m *MockChatUsecaseInterface) ChatsWriter(newChat *models.Chat) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChatsWriter", newChat)
}

// ChatsWriter indicates an expected call of ChatsWriter.
func (mr *MockChatUsecaseInterfaceMockRecorder) ChatsWriter(newChat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatsWriter", reflect.TypeOf((*MockChatUsecaseInterface)(nil).ChatsWriter), newChat)
}
