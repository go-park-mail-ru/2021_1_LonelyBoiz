// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager.go

// Package mock_session is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManagerInterface is a mock of SessionManagerInterface interface.
type MockSessionManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerInterfaceMockRecorder
}

// MockSessionManagerInterfaceMockRecorder is the mock recorder for MockSessionManagerInterface.
type MockSessionManagerInterfaceMockRecorder struct {
	mock *MockSessionManagerInterface
}

// NewMockSessionManagerInterface creates a new mock instance.
func NewMockSessionManagerInterface(ctrl *gomock.Controller) *MockSessionManagerInterface {
	mock := &MockSessionManagerInterface{ctrl: ctrl}
	mock.recorder = &MockSessionManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManagerInterface) EXPECT() *MockSessionManagerInterfaceMockRecorder {
	return m.recorder
}

// CheckSession mocks base method.
func (m *MockSessionManagerInterface) CheckSession(tokens []string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", tokens)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockSessionManagerInterfaceMockRecorder) CheckSession(tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSessionManagerInterface)(nil).CheckSession), tokens)
}

// DeleteCookie mocks base method.
func (m *MockSessionManagerInterface) DeleteCookie(cookie *http.Cookie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCookie", cookie)
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockSessionManagerInterfaceMockRecorder) DeleteCookie(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockSessionManagerInterface)(nil).DeleteCookie), cookie)
}

// DeleteSessionById mocks base method.
func (m *MockSessionManagerInterface) DeleteSessionById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionById indicates an expected call of DeleteSessionById.
func (mr *MockSessionManagerInterfaceMockRecorder) DeleteSessionById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionById", reflect.TypeOf((*MockSessionManagerInterface)(nil).DeleteSessionById), id)
}

// DeleteSessionByToken mocks base method.
func (m *MockSessionManagerInterface) DeleteSessionByToken(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByToken", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByToken indicates an expected call of DeleteSessionByToken.
func (mr *MockSessionManagerInterfaceMockRecorder) DeleteSessionByToken(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByToken", reflect.TypeOf((*MockSessionManagerInterface)(nil).DeleteSessionByToken), key)
}

// GetIdFromContext mocks base method.
func (m *MockSessionManagerInterface) GetIdFromContext(ctx context.Context) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdFromContext", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIdFromContext indicates an expected call of GetIdFromContext.
func (mr *MockSessionManagerInterfaceMockRecorder) GetIdFromContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdFromContext", reflect.TypeOf((*MockSessionManagerInterface)(nil).GetIdFromContext), ctx)
}

// SetSession mocks base method.
func (m *MockSessionManagerInterface) SetSession(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSession indicates an expected call of SetSession.
func (mr *MockSessionManagerInterfaceMockRecorder) SetSession(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockSessionManagerInterface)(nil).SetSession), id)
}
