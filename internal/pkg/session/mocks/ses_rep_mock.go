// Code generated by MockGen. DO NOT EDIT.
// Source: ./sessions.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepositoryInterface is a mock of SessionRepositoryInterface interface.
type MockSessionRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryInterfaceMockRecorder
}

// MockSessionRepositoryInterfaceMockRecorder is the mock recorder for MockSessionRepositoryInterface.
type MockSessionRepositoryInterfaceMockRecorder struct {
	mock *MockSessionRepositoryInterface
}

// NewMockSessionRepositoryInterface creates a new mock instance.
func NewMockSessionRepositoryInterface(ctrl *gomock.Controller) *MockSessionRepositoryInterface {
	mock := &MockSessionRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepositoryInterface) EXPECT() *MockSessionRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddCookie mocks base method.
func (m *MockSessionRepositoryInterface) AddCookie(id int, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCookie", id, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCookie indicates an expected call of AddCookie.
func (mr *MockSessionRepositoryInterfaceMockRecorder) AddCookie(id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCookie", reflect.TypeOf((*MockSessionRepositoryInterface)(nil).AddCookie), id, token)
}

// DeleteCookie mocks base method.
func (m *MockSessionRepositoryInterface) DeleteCookie(id int, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", id, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockSessionRepositoryInterfaceMockRecorder) DeleteCookie(id, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockSessionRepositoryInterface)(nil).DeleteCookie), id, token)
}

// GetCookie mocks base method.
func (m *MockSessionRepositoryInterface) GetCookie(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockSessionRepositoryInterfaceMockRecorder) GetCookie(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockSessionRepositoryInterface)(nil).GetCookie), token)
}
