version: "3"

networks:
  front-tier:
  back-tier:

services:
  auth:
    environment: 
      MODE: ${MODE}
    image: auth_server
    ports:
      - "5400:5400"
    volumes:
      - ./static:/app/static
    networks:
      - back-tier
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: ./build/auth.Dockerfile

  pickleapp:
    environment: 
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      SSL_PUBLIC: ${SSL_PUBLIC}
      SSL_PRIVATE: ${SSL_PRIVATE}
      MODE: ${MODE}
    image: pickleapp_server
    ports:
      - "8000:8000"
    networks:
      - back-tier
      - front-tier
    volumes:
      - ./static:/app/static
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: ./build/pickleapp.Dockerfile

  image:
    environment: 
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    image: image_server
    ports:
      - "5200:5200"
    networks:
      - back-tier
    volumes:
      - ./static:/app/static
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: ./build/image.Dockerfile

  user:
    environment: 
      CAPTCHA: ${CAPTCHA}
      MODE: ${MODE}
    image: user_server
    ports:
      - "5500:5500"
    networks:
      - back-tier
    volumes:
      - ./static:/app/static
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: ./build/user.Dockerfile

  postgres:
    image: postgres:latest
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./proj.session.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    ports:
      - "5432:5432"
    networks:
      - back-tier
    restart: always

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./build/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - back-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana:master
    depends_on:
      - prometheus
    ports:
      - 3001:3001
    networks:
      - back-tier
      - front-tier
    restart: always


volumes:
  prometheus_data: { }
  grafana_data: { }
  database_data:
    driver: local
